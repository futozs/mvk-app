import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

/// Glob√°lis alkalmaz√°s √°llapot kezel≈ë
/// Kezeli az alkalmaz√°s lifecycle-j√°t √©s a h√°tt√©rb≈ël val√≥ visszat√©r√©st
class AppStateManager extends ChangeNotifier with WidgetsBindingObserver {
  static final AppStateManager _instance = AppStateManager._internal();
  factory AppStateManager() => _instance;
  AppStateManager._internal();

  // Alkalmaz√°s √°llapotok
  AppLifecycleState _lifecycleState = AppLifecycleState.resumed;
  bool _isInitialized = false;
  bool _isBackgroundMode = false;
  DateTime? _backgroundTime;
  bool _shouldShowSplash = true;

  // Getters
  AppLifecycleState get lifecycleState => _lifecycleState;
  bool get isInitialized => _isInitialized;
  bool get isBackgroundMode => _isBackgroundMode;
  bool get shouldShowSplash => _shouldShowSplash;

  /// Alkalmaz√°s √°llapot manager inicializ√°l√°sa
  void initialize() {
    if (_isInitialized) return;

    WidgetsBinding.instance.addObserver(this);
    _isInitialized = true;
    debugPrint('üü¢ AppStateManager: Inicializ√°lva');
  }

  /// Alkalmaz√°s els≈ë ind√≠t√°s ut√°n
  void markAppAsStarted() {
    _shouldShowSplash = false;
    notifyListeners();
    debugPrint('üü¢ AppStateManager: App elind√≠tva - splash mell≈ëzhet≈ë');
  }

  /// Splash screen k√©nyszer√≠t√©se (debug/√∫jraind√≠t√°s)
  void forceSplashScreen() {
    _shouldShowSplash = true;
    notifyListeners();
    debugPrint('üîÑ AppStateManager: Splash screen k√©nyszer√≠t√©se');
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    final previousState = _lifecycleState;
    _lifecycleState = state;

    switch (state) {
      case AppLifecycleState.resumed:
        _handleAppResumed(previousState);
        break;
      case AppLifecycleState.inactive:
        _handleAppInactive();
        break;
      case AppLifecycleState.paused:
        _handleAppPaused();
        break;
      case AppLifecycleState.detached:
        _handleAppDetached();
        break;
      case AppLifecycleState.hidden:
        _handleAppHidden();
        break;
    }

    notifyListeners();
  }

  void _handleAppResumed(AppLifecycleState previousState) {
    if (_isBackgroundMode) {
      final backgroundDuration =
          _backgroundTime != null
              ? DateTime.now().difference(_backgroundTime!)
              : Duration.zero;

      debugPrint('üü¢ AppStateManager: App visszat√©rt a foreground-ba');
      debugPrint(
        '‚è±Ô∏è H√°tt√©rben t√∂lt√∂tt id≈ë: ${backgroundDuration.inSeconds} m√°sodperc',
      );

      // Ha kevesebb mint 30 m√°sodpercet t√∂lt√∂tt a h√°tt√©rben, ne splash screen
      if (backgroundDuration.inSeconds < 30) {
        _shouldShowSplash = false;
        debugPrint('‚úÖ Gyors visszat√©r√©s - splash mell≈ëz√©se');
      } else if (backgroundDuration.inMinutes > 5) {
        // Ha 5 percn√©l tov√°bb volt h√°tt√©rben, refresh sz√ºks√©ges
        _shouldShowSplash = true;
        debugPrint('üîÑ Hossz√∫ h√°tt√©r id≈ë - splash screen megjelen√≠t√©se');
      }

      _isBackgroundMode = false;
      _backgroundTime = null;
    }
  }

  void _handleAppInactive() {
    debugPrint('üü° AppStateManager: App inakt√≠v (√°tmeneti √°llapot)');
    // Ne csin√°ljunk semmit - √°tmeneti √°llapot
  }

  void _handleAppPaused() {
    debugPrint('üü° AppStateManager: App h√°tt√©rbe ker√ºlt');
    _isBackgroundMode = true;
    _backgroundTime = DateTime.now();

    // Memory management - tiszt√≠tsuk a nem sz√ºks√©ges cache-eket
    _cleanupMemory();
  }

  void _handleAppDetached() {
    debugPrint('üî¥ AppStateManager: App lev√°lasztva (teljes kil√©p√©s)');
    // Ez igazi kil√©p√©s - legk√∂zelebb splash screen kell
    _shouldShowSplash = true;
  }

  void _handleAppHidden() {
    debugPrint('üü° AppStateManager: App elrejtve');
    // Hasonl√≥ a paused-hoz
    if (!_isBackgroundMode) {
      _isBackgroundMode = true;
      _backgroundTime = DateTime.now();
    }
  }

  void _cleanupMemory() {
    // Mem√≥ria optimaliz√°l√°s h√°tt√©rbe ker√ºl√©skor
    try {
      // Rendszer szint≈± garbage collection javaslat
      debugPrint('üßπ AppStateManager: Mem√≥ria tiszt√≠t√°s...');
    } catch (e) {
      debugPrint('‚ùå AppStateManager: Mem√≥ria tiszt√≠t√°s hiba: $e');
    }
  }

  /// Vissza gomb kezel√©se - megakad√°lyozza a v√©letlenszer≈± kil√©p√©st
  Future<bool> handleBackButton(BuildContext context) async {
    debugPrint('‚¨ÖÔ∏è AppStateManager: Vissza gomb megnyomva');

    // Ha root route-on vagyunk, h√°tt√©rbe k√ºldj√ºk az app-ot ahelyett hogy kil√©pn√©nk
    if (Navigator.of(context).canPop()) {
      return true; // Engedj√ºk a navig√°ci√≥t
    } else {
      // Root route - h√°tt√©rbe k√ºld√©s
      await _moveToBackground();
      return false; // Ne l√©pjen ki
    }
  }

  Future<void> _moveToBackground() async {
    try {
      debugPrint('üì± AppStateManager: Alkalmaz√°s h√°tt√©rbe k√ºld√©se...');
      // SystemNavigator.pop() helyett SystemChrome haszn√°lata
      await SystemChannels.platform.invokeMethod('SystemNavigator.pop', false);
    } catch (e) {
      debugPrint('‚ùå AppStateManager: H√°tt√©rbe k√ºld√©s hiba: $e');
      // Fallback - r√©gi m√≥dszer
      try {
        SystemNavigator.pop();
      } catch (e2) {
        debugPrint('‚ùå AppStateManager: Fallback h√°tt√©rbe k√ºld√©s hiba: $e2');
      }
    }
  }

  /// Teljes reset (fejleszt√©shez)
  void reset() {
    _isBackgroundMode = false;
    _backgroundTime = null;
    _shouldShowSplash = true;
    notifyListeners();
    debugPrint('üîÑ AppStateManager: Teljes reset v√©grehajtva');
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  /// Debug inform√°ci√≥k
  Map<String, dynamic> getDebugInfo() {
    return {
      'lifecycleState': _lifecycleState.toString(),
      'isInitialized': _isInitialized,
      'isBackgroundMode': _isBackgroundMode,
      'shouldShowSplash': _shouldShowSplash,
      'backgroundTime': _backgroundTime?.toString() ?? 'null',
      'backgroundDuration':
          _backgroundTime != null
              ? DateTime.now().difference(_backgroundTime!).toString()
              : 'null',
    };
  }
}
