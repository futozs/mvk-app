import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'weather_service.dart';

/// Glob√°lis cache service az alkalmaz√°s teljes√≠tm√©ny√©nek jav√≠t√°s√°ra
/// Az alkalmaz√°s els≈ë ind√≠t√°sakor el≈ët√∂lti az √∂sszes sz√ºks√©ges adatot
class AppCacheService {
  static final AppCacheService _instance = AppCacheService._internal();
  factory AppCacheService() => _instance;
  AppCacheService._internal();

  SharedPreferences? _prefs;

  // Cache st√°tuszok
  bool _isInitialized = false;
  bool _isPreloading = false;

  // Cache kulcsok
  static const String _newsDataKey = 'cached_news_data';
  static const String _newsTimestampKey = 'cached_news_timestamp';
  static const String _weatherDataKey = 'cached_weather_data';
  static const String _weatherTimestampKey = 'cached_weather_timestamp';
  static const String _appInitializedKey = 'app_initialized';
  static const String _preloadCompletedKey = 'preload_completed';

  // Cache id≈ëtartamok - 10 perc mindenhol
  static const Duration _newsCacheDuration = Duration(minutes: 10);
  static const Duration _weatherCacheDuration = Duration(minutes: 10);

  // El≈ët√∂lt√∂tt adatok
  List<Map<String, dynamic>>? _cachedNews;
  Map<String, dynamic>? _cachedWeather;

  /// Service inicializ√°l√°sa
  Future<void> initialize() async {
    if (_isInitialized) return;

    _prefs = await SharedPreferences.getInstance();
    _isInitialized = true;

    // Ellen≈ërizz√ºk hogy ez az els≈ë ind√≠t√°s-e
    final isFirstRun = !(_prefs?.getBool(_appInitializedKey) ?? false);

    if (isFirstRun) {
      // Els≈ë ind√≠t√°s - teljes el≈ët√∂lt√©s
      await _performFullPreload();
      await _prefs?.setBool(_appInitializedKey, true);
    } else {
      // Kor√°bbi ind√≠t√°s - csak a lej√°rt cache-ek friss√≠t√©se
      await _loadCachedData();
    }
  }

  /// Teljes el≈ët√∂lt√©s az els≈ë ind√≠t√°skor
  Future<void> _performFullPreload() async {
    if (_isPreloading) return;
    _isPreloading = true;

    try {
      debugPrint('üöÄ AppCache: Teljes el≈ët√∂lt√©s kezd√©se...');

      // P√°rhuzamos el≈ët√∂lt√©s a jobb teljes√≠tm√©ny√©rt
      await Future.wait([
        _preloadNews(),
        _preloadWeather(),
        _preloadImages(),
        _preloadAppSettings(),
      ]);

      await _prefs?.setBool(_preloadCompletedKey, true);
      debugPrint('‚úÖ AppCache: El≈ët√∂lt√©s befejezve!');
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba az el≈ët√∂lt√©s sor√°n: $e');
    } finally {
      _isPreloading = false;
    }
  }

  /// H√≠rek el≈ët√∂lt√©se
  Future<void> _preloadNews() async {
    try {
      debugPrint('üì∞ AppCache: H√≠rek el≈ët√∂lt√©se...');

      final response = await http
          .post(
            Uri.parse('https://mobilalkalmazas.mvkzrt.hu:8443/analyzer.php'),
            headers: {
              'User-Agent':
                  'Dalvik/2.1.0 (Linux; U; Android 15; SM-A566B Build/AP3A.240905.015.A2)',
              'Host': 'mobilalkalmazas.mvkzrt.hu:8443',
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'NI9rln8F=1&V=53&o5xfIG1p99=hu',
          )
          .timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);
        if (jsonData['forgalmi_hirek'] != null) {
          _cachedNews = List<Map<String, dynamic>>.from(
            jsonData['forgalmi_hirek'],
          );

          // Cache ment√©se
          await _prefs?.setString(_newsDataKey, json.encode(_cachedNews));
          await _prefs?.setInt(
            _newsTimestampKey,
            DateTime.now().millisecondsSinceEpoch,
          );

          debugPrint(
            '‚úÖ AppCache: H√≠rek bet√∂ltve (${_cachedNews?.length} darab)',
          );
        }
      }
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba a h√≠rek bet√∂lt√©sekor: $e');
      // Fallback - kor√°bbi cache bet√∂lt√©se ha van
      await _loadCachedNews();
    }
  }

  /// Id≈ëj√°r√°s el≈ët√∂lt√©se (val√≥s API adatokkal)
  Future<void> _preloadWeather() async {
    try {
      debugPrint('üå§Ô∏è AppCache: Id≈ëj√°r√°s el≈ët√∂lt√©se...');

      // Val√≥s id≈ëj√°r√°s service haszn√°lata
      final weatherService = WeatherService();
      final weatherData = await weatherService.getCurrentWeather(
        forceRefresh: true,
      );

      // Weather data konvert√°l√°sa cache form√°tumra
      _cachedWeather = {
        'temperature': weatherData.temperature,
        'condition': weatherData.condition.name,
        'humidity': weatherData.humidity,
        'windSpeed': weatherData.windSpeed,
        'city': weatherData.cityName,
        'description': weatherData.description,
      };

      // Cache ment√©se
      await _prefs?.setString(_weatherDataKey, json.encode(_cachedWeather));
      await _prefs?.setInt(
        _weatherTimestampKey,
        DateTime.now().millisecondsSinceEpoch,
      );

      debugPrint(
        '‚úÖ AppCache: Val√≥s id≈ëj√°r√°s bet√∂ltve: ${weatherData.temperature.round()}¬∞C',
      );
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba az id≈ëj√°r√°s bet√∂lt√©sekor: $e');

      // Fallback - alap√©rtelmezett id≈ëj√°r√°s adat
      _cachedWeather = {
        'temperature': 22,
        'condition': 'sunny',
        'humidity': 65,
        'windSpeed': 12,
        'city': 'Miskolc',
        'description': 'Der√ºlt',
      };

      // Cache ment√©se
      await _prefs?.setString(_weatherDataKey, json.encode(_cachedWeather));
      await _prefs?.setInt(
        _weatherTimestampKey,
        DateTime.now().millisecondsSinceEpoch,
      );
    }
  }

  /// K√©pek el≈ët√∂lt√©se a cache-be
  Future<void> _preloadImages() async {
    try {
      debugPrint('üñºÔ∏è AppCache: K√©pek el≈ët√∂lt√©se...');

      // Flutter automatikusan cache-eli az asset k√©peket
      // Itt csak jelezz√ºk hogy ez is megt√∂rt√©nt
      await Future.delayed(const Duration(milliseconds: 100));

      debugPrint('‚úÖ AppCache: K√©pek el≈ët√∂ltve');
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba a k√©pek el≈ët√∂lt√©sekor: $e');
    }
  }

  /// App be√°ll√≠t√°sok el≈ët√∂lt√©se
  Future<void> _preloadAppSettings() async {
    try {
      debugPrint('‚öôÔ∏è AppCache: Be√°ll√≠t√°sok el≈ët√∂lt√©se...');

      // T√©ma, nyelv, stb. be√°ll√≠t√°sok cache-el√©se
      await Future.delayed(const Duration(milliseconds: 50));

      debugPrint('‚úÖ AppCache: Be√°ll√≠t√°sok el≈ët√∂ltve');
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba a be√°ll√≠t√°sok el≈ët√∂lt√©sekor: $e');
    }
  }

  /// Cache-elt adatok bet√∂lt√©se
  Future<void> _loadCachedData() async {
    await _loadCachedNews();
    await _loadCachedWeather();
  }

  /// Cache-elt h√≠rek bet√∂lt√©se
  Future<void> _loadCachedNews() async {
    try {
      final newsData = _prefs?.getString(_newsDataKey);
      final timestamp = _prefs?.getInt(_newsTimestampKey);

      if (newsData != null && timestamp != null) {
        final cacheAge = DateTime.now().millisecondsSinceEpoch - timestamp;
        if (cacheAge < _newsCacheDuration.inMilliseconds) {
          _cachedNews = List<Map<String, dynamic>>.from(json.decode(newsData));
          debugPrint(
            'üì∞ AppCache: Cache-elt h√≠rek bet√∂ltve (${_cachedNews?.length} darab)',
          );
        }
      }
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba a cache-elt h√≠rek bet√∂lt√©sekor: $e');
    }
  }

  /// Cache-elt id≈ëj√°r√°s bet√∂lt√©se
  Future<void> _loadCachedWeather() async {
    try {
      final weatherData = _prefs?.getString(_weatherDataKey);
      final timestamp = _prefs?.getInt(_weatherTimestampKey);

      if (weatherData != null && timestamp != null) {
        final cacheAge = DateTime.now().millisecondsSinceEpoch - timestamp;
        if (cacheAge < _weatherCacheDuration.inMilliseconds) {
          _cachedWeather = json.decode(weatherData);
          debugPrint('üå§Ô∏è AppCache: Cache-elt id≈ëj√°r√°s bet√∂ltve');
        }
      }
    } catch (e) {
      debugPrint('‚ùå AppCache: Hiba a cache-elt id≈ëj√°r√°s bet√∂lt√©sekor: $e');
    }
  }

  // === GETTER MET√ìDUSOK ===

  /// H√≠rek lek√©r√©se (cache-elt vagy friss)
  Future<List<Map<String, dynamic>>?> getNews({
    bool forceRefresh = false,
  }) async {
    if (forceRefresh || _cachedNews == null || _isNewsCacheExpired()) {
      await _preloadNews();
    }
    return _cachedNews;
  }

  /// Id≈ëj√°r√°s lek√©r√©se (cache-elt vagy friss)
  Future<Map<String, dynamic>?> getWeather({bool forceRefresh = false}) async {
    if (forceRefresh || _cachedWeather == null || _isWeatherCacheExpired()) {
      await _preloadWeather();
    }
    return _cachedWeather;
  }

  /// Cache st√°tusz lek√©r√©se
  bool get isInitialized => _isInitialized;
  bool get isPreloading => _isPreloading;
  bool get isPreloadCompleted => _prefs?.getBool(_preloadCompletedKey) ?? false;

  /// Ellen≈ërzi hogy sz√ºks√©ges-e b√°rmelyik cache friss√≠t√©se
  bool needsRefresh() {
    return _isNewsCacheExpired() || _isWeatherCacheExpired();
  }

  /// Utols√≥ cache friss√≠t√©s ideje
  DateTime? getLastCacheTime() {
    final newsTimestamp = _prefs?.getInt(_newsTimestampKey);
    final weatherTimestamp = _prefs?.getInt(_weatherTimestampKey);

    if (newsTimestamp == null && weatherTimestamp == null) return null;

    final newsTime =
        newsTimestamp != null
            ? DateTime.fromMillisecondsSinceEpoch(newsTimestamp)
            : DateTime(1970);
    final weatherTime =
        weatherTimestamp != null
            ? DateTime.fromMillisecondsSinceEpoch(weatherTimestamp)
            : DateTime(1970);

    return newsTime.isAfter(weatherTime) ? newsTime : weatherTime;
  }

  // === HELPER MET√ìDUSOK ===

  bool _isNewsCacheExpired() {
    final timestamp = _prefs?.getInt(_newsTimestampKey);
    if (timestamp == null) return true;

    final age = DateTime.now().millisecondsSinceEpoch - timestamp;
    return age > _newsCacheDuration.inMilliseconds;
  }

  bool _isWeatherCacheExpired() {
    final timestamp = _prefs?.getInt(_weatherTimestampKey);
    if (timestamp == null) return true;

    final age = DateTime.now().millisecondsSinceEpoch - timestamp;
    return age > _weatherCacheDuration.inMilliseconds;
  }

  /// Cache tiszt√≠t√°sa (debug c√©lokra)
  Future<void> clearCache() async {
    await _prefs?.remove(_newsDataKey);
    await _prefs?.remove(_newsTimestampKey);
    await _prefs?.remove(_weatherDataKey);
    await _prefs?.remove(_weatherTimestampKey);
    await _prefs?.remove(_preloadCompletedKey);

    _cachedNews = null;
    _cachedWeather = null;

    debugPrint('üßπ AppCache: Cache t√∂r√∂lve');
  }

  /// Teljes √∫jraind√≠t√°s (√∫j felhaszn√°l√≥ szimul√°l√°sa)
  Future<void> resetForNewUser() async {
    await clearCache();
    await _prefs?.remove(_appInitializedKey);
    debugPrint('üîÑ AppCache: Reset √∫j felhaszn√°l√≥nak');
  }
}
